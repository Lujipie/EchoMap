#include <Wire.h>
#include <Adafruit_MMA8451.h>
#include <Adafruit_Sensor.h>
#include <Servo.h>
#include <Adafruit_VL53L0X.h>

// Create sensor instances
Adafruit_MMA8451 mma = Adafruit_MMA8451();
Adafruit_VL53L0X lox = Adafruit_VL53L0X();

// Ultrasonic sensor pins
const int trigPin = 9;
const int echoPin = 10;

// MPU6050 I2C address
const int MPU_ADDR = 0x68;

// Sensor data variables
float mmaAccelX, mmaAccelY, mmaAccelZ;
float mpuAccelX, mpuAccelY, mpuAccelZ;
float distance, vl53Distance;
float avgAccelX, avgAccelY, avgAccelZ;
float gyroX, gyroY, gyroZ;

// Servo motor setup
Servo myServo;
int currentAngle = 0;
const int angleIncrement = 10;

void setup() {
    Serial.begin(9600);
    Serial.println("Initializing sensors...");

    if (!mma.begin()) {
        Serial.println("MMA8451 not found!");
        while (1);
    }
    mma.setRange(MMA8451_RANGE_2_G);

    Wire.begin();
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x6B);
    Wire.write(0);
    Wire.endTransmission(true);

    if (!lox.begin()) {
        Serial.println("VL53L0X sensor not found!");
        while (1);
    }

    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
    myServo.attach(10);
    myServo.write(currentAngle);
}

void loop() {
    for (currentAngle = 0; currentAngle <= 180; currentAngle += angleIncrement) {
        myServo.write(currentAngle);
        delay(500);

        readMMA8451();
        readMPU6050();

        avgAccelX = (mmaAccelX + mpuAccelX) / 2.0;
        avgAccelY = (mmaAccelY + mpuAccelY) / 2.0;
        avgAccelZ = (mmaAccelZ + mpuAccelZ) / 2.0;

        distance = getUltrasonicDistance();
        vl53Distance = getVL53L0XDistance();

        sendDataToSerial(avgAccelX, avgAccelY, avgAccelZ, distance, gyroX, gyroY, gyroZ, vl53Distance);
        delay(200);
    }
}

void readMMA8451() {
    sensors_event_t event;
    mma.getEvent(&event);
    mmaAccelX = event.acceleration.x;
    mmaAccelY = event.acceleration.y;
    mmaAccelZ = event.acceleration.z;
}

void readMPU6050() {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_ADDR, 14, true);

    mpuAccelX = (Wire.read() << 8 | Wire.read()) / 16384.0;
    mpuAccelY = (Wire.read() << 8 | Wire.read()) / 16384.0;
    mpuAccelZ = (Wire.read() << 8 | Wire.read()) / 16384.0;
    Wire.read(); Wire.read();
    gyroX = (Wire.read() << 8 | Wire.read()) / 131.0;
    gyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
    gyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
}

float getVL53L0XDistance() {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    return (measure.RangeStatus != 4) ? measure.RangeMilliMeter / 10.0 : -1.0;
}

float getUltrasonicDistance() {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    long duration = pulseIn(echoPin, HIGH, 30000);
    return (duration == 0) ? -1.0 : (duration * 0.0343) / 2.0;
}

void sendDataToSerial(float avgAccelX, float avgAccelY, float avgAccelZ, float distance, float gyroX, float gyroY, float gyroZ, float vl53Distance) {
    Serial.print(currentAngle); Serial.print(",");
    Serial.print(avgAccelX); Serial.print(",");
    Serial.print(avgAccelY); Serial.print(",");
    Serial.print(avgAccelZ); Serial.print(",");
    Serial.print(distance); Serial.print(",");
    Serial.print(gyroX); Serial.print(",");
    Serial.print(gyroY); Serial.print(",");
    Serial.print(gyroZ); Serial.print(",");
    Serial.print(vl53Distance);
    Serial.println();
}
